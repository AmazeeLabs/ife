<?php
// $Id$

/**
 * @file
 * Drupal hooks
 *
 * @author Stijn De Meyere
 */


/**
 * Implements hook_menu().
 */
function ife_menu() {
  $items = array();

  $items['admin/config/ife'] = array(
    'title' => 'Inline Form Errors',
    'description' => 'Administer which forms to use with field messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ife_settings_form'),
    'access arguments' => array('administer inline form errors'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ife.settings.inc',
  );
  $items['admin/config/ife/%ife_form_id/delete'] = array(
    'title' => 'Delete form_id',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ife_form_id_delete_form', 3),
    'access arguments' => array('administer inline form errors'),
    'type' => MENU_CALLBACK,
    'file' => 'ife.settings.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ife_permission() {
  return array(
    'administer inline form errors' => array(
      'title' => t('administer inline form errors'),
      'description' => t('TODO Add a description for \'administer inline form errors\''),
    ),
  );
}

/**
 * Implements hook_help().
 */
function ife_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ife':
      $output = '<p>' . t('IFE or Inline Form Errors allows you to place form submission error inline with the form elements. Three options are provided for setting your inline error behaviour. You can configure the default behaviour or override the behaviour on a per form basis. You can add as many forms as you like.') . '</p>';

      $output .= '<p>' . t('IFE provides three behaviours for the configured forms') . '</p>';

      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Leave the messages in place</strong>, this option will copy the error messages and place them inline. The original error messages set by Drupal will remain in place') . '</li>';
      $output .= '<li>' . t("<strong>Show an alternate message</strong>, this option will replace the original messages with a generic error message such as 'Please correct all errors.'. This message can be set in the IFE configuration page. The original error messages are placed inline with the form elements") . '</li>';
      $output .= '<li>' . t('<strong>Remove all messages</strong>, this option will remove all error messages and place them inline with the form element') . '</li>';
      $output .= '</ul>';

      $output .= '<p>' . t('In all cases only the messages related to the form will be touched. All other messages will remain in tact.') . '</p>';

      return $output;

    case 'admin/config/ife':
      return '<p>' . t('This page provides the interface for adding new forms to use inline errors. Just add the form_id of the forms you wish to alter. The default settings can be overridden on a per form basis.') . '</p>';
  }
}

/**
 * Menu loader function to fetch a form id.
 */
function ife_form_id_load($form_id) {
  $form_ids = ife_load_form_ids();

  if (array_key_exists($form_id, $form_ids)) {
    return $form_ids[$form_id];
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function ife_theme() {
  return array(
    'ife_settings_form_ids' => array(
      'render element' => 'form',
      'file' => 'ife.theme.inc',
    ),
    'ife_form_element' => array(
      'render element' => 'element',
      'file' => 'ife.theme.inc',
      'path' => drupal_get_path('module', 'ife'),
    ),
  );
}

/**
 *  Load all form ids from the data base
 */
function ife_load_form_ids() {
  static $ife_form_ids;

  if ($ife_form_ids) {
    $form_ids = $ife_form_ids;
  }
  else {
    $cache = cache_get('ife_form_ids', 'cache');
    if ($cache) {
      $form_ids = $cache->data;
    }
  }

  if (empty($form_ids)) {

    $result = db_select('ife')
      ->fields('ife', array('form_id', 'field_types', 'status', 'display'))
      ->orderBy('form_id')
      ->execute();

    $form_ids = array();
    foreach ($result as $row) {
      $form_ids[$row->form_id] = $row;
    }
    cache_set('ife_form_ids', $form_ids, 'cache');
  }

  $ife_form_ids = $form_ids;
  return $ife_form_ids;
}

/**
 * Helper function to determine the display settings of a form
 */
function ife_form_id_display($form_id) {
  if ($form_id->display == -1) {
    $display = variable_get('ife_display', 1);
  }
  else {
    $display = $form_id->display;
  }

  return $display;
}

/**
 * Implements hook_form_alter().
 */
function ife_form_alter(&$form, $form_state, $form_id) {
  $ife_options = ife_form_id_load($form_id);
  if ($ife_options && $ife_options->status) {
    $display = ife_form_id_display($ife_options);
    ife_filter_form($form, $display);
    $form['#ife_display'] = $display;
    $form['#validate'][] = 'ife_form_validator';
    $form['#post_render'][] = 'ife_session_cleanup';
  }

  //print form_ids
  if (variable_get('ife_show_form_ids', 0)) {
    $form['ife_form_id'] = array(
      '#markup' => t('Form ID: @form_id', array('@form_id' => $form_id)),
      '#weight' => -1000,
      '#access' => user_access('administer inline form errors'),
    );
  }

}

/**
 * Function to set the general error mesage if set
 */
function ife_form_validator($form, &$form_state) {

  $form_errors = form_get_errors();

  if (!empty($form_errors)) {
    ife_element_get_error($form);

    if ($form['#ife_display'] == 1) {
      $message = filter_xss_admin(variable_get('ife_general_message', 'Please correct all highlighted errors and try again.'));
      drupal_set_message($message, 'error');
    }
  }

}

/**
 * Function to recursivly go through a form and alter all valid field type elements
 */
function ife_filter_form(&$form, $display) {
  //get all possible children
  $keys = element_children($form);
  $field_types = ife_field_types();

  foreach ($keys as $key) {
    $element_type = (isset($form[$key]['#type']) ? $form[$key]['#type'] : FALSE);

    if (in_array($element_type, $field_types)) {
      ife_alter_form_element($form[$key], $display);
    }
    elseif ($element_type == 'fieldset' || !$element_type) {
      ife_filter_form($form[$key], $display);
    }
  }
}

/**
 * Function to add our custom theme to the element
 */
function ife_alter_form_element(&$element, $display) {
  $element['#theme_wrappers'][] = 'ife_form_element';
  //resend the element type, drupal sets the #type marker to markup
  $element['#field_type'] = $element['#type'];
  //add display type to element to avoid extra queries
  $element['#display_type'] = $display;
}


/**
 * Function to determine all element errors on a given element.
 */
function ife_element_get_error($element, $debug = FALSE) {

  if (!isset($_SESSION['messages'])) {
    return;
  }

  // Recurse through all children.
  foreach (element_children($element) as $key) {
    if (isset($element[$key]) && $element[$key]) {
      ife_element_get_error($element[$key]);
    }
  }

  //check for errors and settings
  if ($error_message = form_get_error($element)) {
    //get error id
    $error_id = array_search($error_message, $_SESSION['messages']['error']);

    if ($error_id !== FALSE) {
      if ($element['#display_type'] != 0) {
        unset($_SESSION['messages']['error'][$error_id]);
        $_SESSION['messages']['error'] = array_values($_SESSION['messages']['error']);
      }

      if (count($_SESSION['messages']['error']) <= 0) {
        unset($_SESSION['messages']['error']);
      }

      // Set error message in session, so it can be used in our theming.
      $_SESSION['ife'][$element['#id']] = $error_message;

    }
  }

}

/**
 * Clear the session after the form has been build.
 */
function ife_session_cleanup($form, $form_state) {
  unset($_SESSION['ife']);
  return $form;
}

/**
 * Helper function that identifies the different field types default in drupal
 */
function ife_field_types() {
  $expandable = ife_expandable_field_types();
  $extra = array('checkbox', 'file', 'password', 'radio', 'select', 'textarea', 'textfield', 'weight');

  return array_merge($expandable, $extra);
}

/**
 * Helper function that identifies the different expandable field types default in drupal
 */
function ife_expandable_field_types() {
  $core = array('checkboxes', 'date', 'password_confirm', 'radios');
  $cck = array('date_combo', 'date_popup', 'date_repeat_rrule', 'email_textfield', 'filefield_widget', 'imagefield_widget', 'link', 'nodereference_select', 'nodereference_buttons', 'nodereference_autocomplete', 'number', 'optionwidgets_select', 'optionwidgets_buttons', 'optionwidgets_onoff', 'text_textfield', 'text_textarea', 'userreference_select', 'userreference_buttons', 'userreference_autocomplete', 'userreference_formatter_default', 'userreference_formatter_plain');

  return array_merge($core, $cck);
}